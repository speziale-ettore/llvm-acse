//===- AbstractSyntaxTreeNode.def - LANCE ASTs ------------------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//

// Represents the empty production in the AST.
AST(Empty)

// Each token is represented by a different AST.
#define TOKEN(I) \
AST(I)
#include "acse/Lex/Token.def"
#undef TOKEN

// Grammar root.
AST(Program)

// Non-terminal rule ASTs: variable declarations.
AST(VarDeclarations)
AST(NonEmptyVarDeclarations)
AST(VarDeclaration)

// Non-terminal rule ASTs: declarations.
AST(DeclarationList)
AST(Declaration)
AST(ScalarDeclaration)
AST(ArrayDeclaration)
AST(Type)

// Non-terminal rule ASTs: initializers.
AST(ArrayInitializer)
AST(ScalarInitializer)
AST(InitializerList)
AST(Initializer)

// Non-terminal rule ASTs: statements.
AST(Statements)
AST(NonEmptyStatements)
AST(Statement)

// Non-terminal rule ASTs: statements category.
AST(AssignStatement)
AST(ReadWriteStatement)
AST(NullStatement)
AST(ControlStatement)

// Non-terminal rule ASTs: assignments.
AST(ScalarAssignment)
AST(ArrayAssignment)

// Non-terminal rule ASTs: I/O.
AST(ReadStatement)
AST(WriteStatement)

// Non-terminal rule ASTs: controls.
AST(IfStatement)
AST(WhileStatement)
AST(DoWhileStatement)
AST(ReturnStatement)

// Not-terminal rule ASTs: code blocks.
AST(CodeBlock)

// Non-terminal rule ASTs: algebraic expressions.
AST(AddExpr) // '+'
AST(SubExpr) // '-'
AST(MulExpr) // '*'
AST(DivExpr) // '/'
AST(ModExpr) // '%'

// Non-terminal rule ASTs: relational expressions.
AST(LessExpr)           // '<'
AST(LessOrEqualExpr)    // '<='
AST(EqualExpr)          // '=='
AST(NotEqualExpr)       // '!='
AST(GreaterOrEqualExpr) // '>='
AST(GreaterExpr)        // '>'

// Non-terminal rule ASTs: bitwise expressions.
AST(BAndExpr)   // '&'
AST(BOrExpr)    // '|'
AST(LShiftExpr) // '<<'
AST(RShiftExpr) // '>>'

// Non-terminal rule ASTs: logical expressions.
AST(LAndExpr) // '&&'
AST(LOrExpr)  // '||'

// Non-terminal rule ASTs: primary expressions.
AST(NestedExpr)
AST(BNotExpr)
AST(MinusExpr)
AST(ScalarIdentifierExpr)
AST(ArrayIdentifierExpr)
AST(NumberExpr)
