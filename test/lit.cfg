# -*- Python -*-

import os
import platform
import re
import subprocess
import tempfile

# Configuration file for the 'lit' test runner.

# name: The name of this test suite.
config.name = 'llvm-acse'

# Tweak PATH for Win32.
if platform.system() == 'Windows':
  # Seek sane tools in directories and set to $PATH.
  path = getattr(config, 'lit_tools_dir', None)
  path = lit.getToolsPath(path,
                          config.environment['PATH'],
                          ['cmp.exe', 'grep.exe', 'sed.exe'])
  if path is not None:
    path = os.path.pathsep.join((path,
                                 config.environment['PATH']))
    config.environment['PATH'] = path

# testFormat: The test format to use to interpret tests.
#
# For now we require '&&' between commands, until they get globally killed and
# the test runner updated.
execute_external = (platform.system() != 'Windows'
                    or lit.getBashPath() not in [None, ""])
config.test_format = lit.formats.ShTest(execute_external)

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.l']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root path where tests should be run.
proj_obj_root = getattr(config, 'proj_obj_root', None)
if proj_obj_root is not None:
  config.test_exec_root = os.path.join(proj_obj_root, 'test')

# Set llvm_{src,obj}_root for use by others.
config.llvm_src_root = getattr(config, 'llvm_src_root', None)
config.llvm_obj_root = getattr(config, 'llvm_obj_root', None)

possibly_dangerous_env_vars = []

# Tweak the PATH to include the tools dir and the scripts dir.
if proj_obj_root is not None:
  llvm_tools_dir = getattr(config, 'llvm_tools_dir', None)
  if not llvm_tools_dir:
    lit.fatal('No LLVM tools dir set!')
  path = os.path.pathsep.join((llvm_tools_dir, config.environment['PATH']))
  config.environment['PATH'] = path

  llvm_libs_dir = getattr(config, 'llvm_libs_dir', None)
  if not llvm_libs_dir:
    lit.fatal('No LLVM libs dir set!')
  path = os.path.pathsep.join((llvm_libs_dir,
                               config.environment.get('LD_LIBRARY_PATH','')))
  config.environment['LD_LIBRARY_PATH'] = path

  proj_tools_dir = getattr(config, 'proj_tools_dir', None)
  if not proj_tools_dir:
    lit.fatal('No tools dir set!')
  path = os.pathsep.join((proj_tools_dir, config.environment['PATH']))
  config.environment['PATH'] = path

  proj_libs_dir = getattr(config, 'proj_libs_dir', None)
  if not proj_libs_dir:
    lit.fatal('No libs dir set!')
  path = os.pathsep.join((proj_libs_dir, config.environment['PATH']))
  config.environment['PATH'] = path

###

# Check that the object root is known.
if config.test_exec_root is None:
  # Otherwise, we haven't loaded the site specific configuration (the user is
  # probably trying to run on a test file directly, and either the site
  # configuration hasn't been created by the build system, or we are in an
  # out-of-tree build situation).

  # Check for 'proj_site_config' user parameter, and use that if available.
  site_cfg = lit.params.get('proj_site_config', None)
  if site_cfg and os.path.exists(site_cfg):
    lit.load_config(config, site_cfg)
    raise SystemExit

  # TODO: implement automatically configure and run.
  raise SystemExit

###

# Set available features we allow tests to conditionalize on.

# Shell execution
if platform.system() not in ['Windows'] or lit.getBashPath() != '':
  config.available_features.add('shell')

# Exclude MSYS due to transforming '/' to 'X:/mingwroot/'.
if not platform.system() in ['Windows'] or lit.getBashPath() == '':
  config.available_features.add('shell-preserves-root')

# ANSI escape sequences in non-dumb terminal
if platform.system() not in ['Windows']:
  config.available_features.add('ansi-escape-sequences')

# Case-insensitive file system
def is_filesystem_case_insensitive():
  handle, path = tempfile.mkstemp(prefix='case-test', dir=config.test_exec_root)
  isInsensitive = os.path.exists(path.upper())
  os.close(handle)
  os.remove(path)
  return isInsensitive

if is_filesystem_case_insensitive():
  config.available_features.add('case-insensitive-filesystem')

# Registered Targets
def get_llc_props(tool):
  set_of_targets = set()
  enable_assertions = False

  cmd = subprocess.Popen([tool, '-version'], stdout=subprocess.PIPE)

  # Parse the stdout to get the list of registered targets.
  parse_targets = False
  for line in cmd.stdout:
    if parse_targets:
      m = re.match( r'(.*) - ', line)
      if m is not None:
        set_of_targets.add(m.group(1).strip() + '-registered-target')
      else:
        break
    elif "Registered Targets:" in line:
      parse_targets = True

    if re.search(r'with assertions', line):
      enable_assertions = True

  return {"set_of_targets":    set_of_targets,
          "enable_assertions": enable_assertions}

llc_props = get_llc_props(os.path.join(llvm_tools_dir, 'llc'))
if len(llc_props['set_of_targets']) > 0:
  config.available_features.update(llc_props['set_of_targets'])
else:
  lit.fatal('No Targets Registered with the LLVM Tools!')

if llc_props['enable_assertions']:
  config.available_features.add('asserts')

if lit.util.which('xmllint'):
  config.available_features.add('xmllint')
